// Code generated by MockGen. DO NOT EDIT.
// Source: productInfoUpdateRepo.go

// Package mock_priceUpdateRepository is a generated GoMock package.
package mock_priceUpdateRepository

import (
	updatePriceModel "product-information-updater/app/updatePrice/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockProductUpdateInfoRepo is a mock of ProductUpdateInfoRepo interface.
type MockProductUpdateInfoRepo struct {
	ctrl     *gomock.Controller
	recorder *MockProductUpdateInfoRepoMockRecorder
}

// MockProductUpdateInfoRepoMockRecorder is the mock recorder for MockProductUpdateInfoRepo.
type MockProductUpdateInfoRepoMockRecorder struct {
	mock *MockProductUpdateInfoRepo
}

// NewMockProductUpdateInfoRepo creates a new mock instance.
func NewMockProductUpdateInfoRepo(ctrl *gomock.Controller) *MockProductUpdateInfoRepo {
	mock := &MockProductUpdateInfoRepo{ctrl: ctrl}
	mock.recorder = &MockProductUpdateInfoRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductUpdateInfoRepo) EXPECT() *MockProductUpdateInfoRepoMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockProductUpdateInfoRepo) Save(payload updatePriceModel.ProductEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockProductUpdateInfoRepoMockRecorder) Save(payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockProductUpdateInfoRepo)(nil).Save), payload)
}
